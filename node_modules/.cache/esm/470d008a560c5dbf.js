let chalk,fs,ncp,path,promisify,execa,Listr,projectInstall;_560‍.x([["createProject",()=>createProject]]);_560‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_560‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_560‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_560‍.w("path",[["default",["path"],function(v){path=v}]]);_560‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_560‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_560‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_560‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);








const access = promisify(fs.access);
const copy = promisify(ncp)

async function copyTemplateFiles(options){
    return copy(options.templateDirectory, options.targetDirectory, {
        clobber:false,
    });
};

async function initGit(options){
    const result = await execa('git', ['init'], {
        cwd: options.targetDirectory,
    });
    if(result.failed){
        return Promise.reject(new Error('failed to initialze git'))
    }
    return
}

       async function createProject(options){
    options ={
        ...options,
        targetDirectory:options.targetDirectory || process.cwd()
    };

    const currentFileUrl = _560‍._.meta.url;
    const templateDir = path.resolve(
        new URL(currentFileUrl).pathname,
        '../../templates',
        options.template.toLowerCase()
    );
    options.templateDirectory = templateDir

    try{
        await access(templateDir, fs.constants.R_OK)
    } catch(err){
        console.error(`Invalid template name ${chalk.red.bold('ERROR')}`);
        process.exit(1);
    };

    const tasks = new Listr([
        {
            title:'Copy project files',
            task: () => copyTemplateFiles(options),
        },
        {
            title:'Initialize git',
            task: () => initGit(options),
            enabled: () => options.git
        },
        {
            title:'Install dependencies',
            task: () => projectInstall({
                cwd: options.targetDirectory
            }),
            skip: ()=> !options.runInstall ? 'Pass --install automatically to install dependencies?'
            :undefined
        },
    ]);
    
    await tasks.run();

    // console.log('copy project files');
    // await copyTemplateFiles(options);
    console.log(`Project ready ${chalk.green.bold('DONE')}`);
    return true;
}
